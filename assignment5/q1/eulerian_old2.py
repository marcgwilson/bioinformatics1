#!/usr/bin/python
import sys


# Returns a dictionary of edges
# key = starting node
# value = list of terminal nodes
def build_node_dict(data):
    nodes = {}
    for d in data:
        d = d.strip()
        if 'Output' in d:
            break
        else:
            node_data = d.split(' -> ')

            s = int(node_data[0])
            ts = node_data[1].split(',')

            nodes[s] = map(int, ts)
    return nodes


# returns a list of starting nodes with odd degree
# this is the list of nodes we should start with when building a Eulerian path
# data is a dictionary generated by build_node_dict
def odd_degrees(data):
    nodes = {}

    for k in data:
        # Determine the degree of the starting nodes
        if k not in nodes:
            nodes[k] = len(data[k])
        else:
            nodes[k] = nodes[k] + len(data[k])
        # Determine the degree of the ending nodes
        for n in data[k]:
            if n not in nodes:
                nodes[n] = 1
            else:
                nodes[n] = nodes[n] + 1

    return dict((k, nodes[k]) for k in nodes if nodes[k] % 2 == 1)


def main():
    # The DNA(?) string to parse
    data_file = open(sys.argv[1], 'r')
    data = data_file.readlines()

    edges = build_node_dict(data[1:])
    degrees = odd_degrees(edges)

    fragments = []

    for node in degrees:
        # If this is a starting node, build a path out of it!
        if node in edges:
            # Do something!
            path = []
            path.append(node)

            current_node = node
            while len(edges) is not None and current_node in edges:

                next_node = edges[current_node][0]
                path.append(next_node)
                if len(edges[current_node]) == 1:
                    edges.pop(current_node, None)
                else:
                    edges[current_node] = edges[current_node][1:]

                current_node = next_node


            fragments.append(path)


    print 'fragments: %s' % fragments
    edges_list = edges.items()

    print 'edges_list: %s' % edges_list
    print 'degrees: %s' % degrees



if __name__ == "__main__":
    main()